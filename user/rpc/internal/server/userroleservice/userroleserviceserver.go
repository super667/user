// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"github.com/super667/user/user/rpc/internal/logic/userroleservice"
	"github.com/super667/user/user/rpc/internal/svc"
	"github.com/super667/user/user/rpc/user"
)

type UserRoleServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserRoleServiceServer
}

func NewUserRoleServiceServer(svcCtx *svc.ServiceContext) *UserRoleServiceServer {
	return &UserRoleServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRoleServiceServer) GetUserRoleById(ctx context.Context, in *user.GetUserRoleByIdReq) (*user.GetUserRoleByIdResp, error) {
	l := userroleservicelogic.NewGetUserRoleByIdLogic(ctx, s.svcCtx)
	return l.GetUserRoleById(in)
}

func (s *UserRoleServiceServer) CreateUserRole(ctx context.Context, in *user.CreateUserRoleReq) (*user.CreateUserRoleResp, error) {
	l := userroleservicelogic.NewCreateUserRoleLogic(ctx, s.svcCtx)
	return l.CreateUserRole(in)
}

func (s *UserRoleServiceServer) DeleteUserRole(ctx context.Context, in *user.DeleteUserRoleReq) (*user.DeleteUserRoleResp, error) {
	l := userroleservicelogic.NewDeleteUserRoleLogic(ctx, s.svcCtx)
	return l.DeleteUserRole(in)
}

func (s *UserRoleServiceServer) UpdateUserRole(ctx context.Context, in *user.UpdateUserRoleReq) (*user.UpdateUserRoleResp, error) {
	l := userroleservicelogic.NewUpdateUserRoleLogic(ctx, s.svcCtx)
	return l.UpdateUserRole(in)
}

func (s *UserRoleServiceServer) PatchUserRole(ctx context.Context, in *user.PatchUserRoleReq) (*user.PatchUserRoleResp, error) {
	l := userroleservicelogic.NewPatchUserRoleLogic(ctx, s.svcCtx)
	return l.PatchUserRole(in)
}

func (s *UserRoleServiceServer) ListUserRole(ctx context.Context, in *user.ListUserRoleReq) (*user.ListUserRoleResp, error) {
	l := userroleservicelogic.NewListUserRoleLogic(ctx, s.svcCtx)
	return l.ListUserRole(in)
}
