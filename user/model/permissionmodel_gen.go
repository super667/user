// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionFieldNames          = builder.RawFieldNames(&Permission{})
	permissionRows                = strings.Join(permissionFieldNames, ",")
	permissionRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	permissionRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	permissionModel interface {
		Insert(ctx context.Context, data *Permission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Permission, error)
		Update(ctx context.Context, data *Permission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Permission struct {
		Id         int64        `db:"id"`
		Resource   string       `db:"resource"` // 权限点
		Perm       string       `db:"perm"`     // 权限
		Desc       string       `db:"desc"`     // 权限点描述
		CreateTime time.Time    `db:"create_time"`
		UpdateTime time.Time    `db:"update_time"`
		DeleteTime sql.NullTime `db:"delete_time"`
	}
)

func newPermissionModel(conn sqlx.SqlConn) *defaultPermissionModel {
	return &defaultPermissionModel{
		conn:  conn,
		table: "`permission`",
	}
}

func (m *defaultPermissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPermissionModel) FindOne(ctx context.Context, id int64) (*Permission, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", permissionRows, m.table)
	var resp Permission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionModel) Insert(ctx context.Context, data *Permission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, permissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Resource, data.Perm, data.Desc, data.DeleteTime)
	return ret, err
}

func (m *defaultPermissionModel) Update(ctx context.Context, data *Permission) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, permissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Resource, data.Perm, data.Desc, data.DeleteTime, data.Id)
	return err
}

func (m *defaultPermissionModel) tableName() string {
	return m.table
}
