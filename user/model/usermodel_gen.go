// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByNumber(ctx context.Context, number string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id           int64        `db:"id"`
		UserName     string       `db:"user_name"`    // 用户名称
		NickName     string       `db:"nick_name"`    // 显示名称
		Number       string       `db:"number"`       // 工号
		Avatar       string       `db:"avatar"`       // 头像
		Email        string       `db:"email"`        // 邮箱
		Phone        string       `db:"phone"`        // 电话号码
		Address      string       `db:"address"`      // 地址
		Position     string       `db:"position"`     // 职位
		Introduction string       `db:"introduction"` // 介绍
		Status       string       `db:"status"`       // 状态
		Source       string       `db:"source"`       // 账号来源
		Age          int64        `db:"age"`          // 年龄
		DeptCode     string       `db:"dept_code"`    // 部门编码
		DeptName     string       `db:"dept_name"`    // 部门名称
		ManagerCode  string       `db:"manager_code"` // 管理者编码
		ManagerName  string       `db:"manager_name"` // 管理者名称
		UserDn       string       `db:"user_dn"`      // 用户dn
		Password     string       `db:"password"`     // 用户密码
		CreateTime   time.Time    `db:"create_time"`
		UpdateTime   time.Time    `db:"update_time"`
		DeleteTime   sql.NullTime `db:"delete_time"`
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByNumber(ctx context.Context, number string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `number` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, number)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName, data.NickName, data.Number, data.Avatar, data.Email, data.Phone, data.Address, data.Position, data.Introduction, data.Status, data.Source, data.Age, data.DeptCode, data.DeptName, data.ManagerCode, data.ManagerName, data.UserDn, data.Password, data.DeleteTime)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserName, newData.NickName, newData.Number, newData.Avatar, newData.Email, newData.Phone, newData.Address, newData.Position, newData.Introduction, newData.Status, newData.Source, newData.Age, newData.DeptCode, newData.DeptName, newData.ManagerCode, newData.ManagerName, newData.UserDn, newData.Password, newData.DeleteTime, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
