// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserReq       = user.CreateUserReq
	CreateUserResp      = user.CreateUserResp
	DeleteUserReq       = user.DeleteUserReq
	DeleteUserResp      = user.DeleteUserResp
	GetUserByIdReq      = user.GetUserByIdReq
	GetUserByIdResp     = user.GetUserByIdResp
	GetUserByNameReq    = user.GetUserByNameReq
	GetUserByNameResp   = user.GetUserByNameResp
	GetUserByNumberReq  = user.GetUserByNumberReq
	GetUserByNumberResp = user.GetUserByNumberResp
	ListUserReq         = user.ListUserReq
	ListUserResp        = user.ListUserResp
	PatchUserReq        = user.PatchUserReq
	PatchUserResp       = user.PatchUserResp
	UpdateUserReq       = user.UpdateUserReq
	UpdateUserResp      = user.UpdateUserResp
	UserDetail          = user.UserDetail
	UserInfo            = user.UserInfo

	User interface {
		// 用户相关接口
		GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
		GetUserByNumber(ctx context.Context, in *GetUserByNumberReq, opts ...grpc.CallOption) (*GetUserByNumberResp, error)
		GetUserByName(ctx context.Context, in *GetUserByNameReq, opts ...grpc.CallOption) (*GetUserByNameResp, error)
		CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
		DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		PatchUser(ctx context.Context, in *PatchUserReq, opts ...grpc.CallOption) (*PatchUserResp, error)
		ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 用户相关接口
func (m *defaultUser) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) GetUserByNumber(ctx context.Context, in *GetUserByNumberReq, opts ...grpc.CallOption) (*GetUserByNumberResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByNumber(ctx, in, opts...)
}

func (m *defaultUser) GetUserByName(ctx context.Context, in *GetUserByNameReq, opts ...grpc.CallOption) (*GetUserByNameResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByName(ctx, in, opts...)
}

func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) PatchUser(ctx context.Context, in *PatchUserReq, opts ...grpc.CallOption) (*PatchUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.PatchUser(ctx, in, opts...)
}

func (m *defaultUser) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ListUser(ctx, in, opts...)
}
