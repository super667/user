// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"github.com/super667/user/rpc/internal/logic/userservice"
	"github.com/super667/user/rpc/internal/svc"
	"github.com/super667/user/rpc/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServiceServer) GetUserById(ctx context.Context, in *user.GetUserByIdReq) (*user.GetUserByIdResp, error) {
	l := userservicelogic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServiceServer) GetUserByNumber(ctx context.Context, in *user.GetUserByNumberReq) (*user.GetUserByNumberResp, error) {
	l := userservicelogic.NewGetUserByNumberLogic(ctx, s.svcCtx)
	return l.GetUserByNumber(in)
}

func (s *UserServiceServer) GetUserByName(ctx context.Context, in *user.GetUserByNameReq) (*user.GetUserByNameResp, error) {
	l := userservicelogic.NewGetUserByNameLogic(ctx, s.svcCtx)
	return l.GetUserByName(in)
}

func (s *UserServiceServer) CreateUser(ctx context.Context, in *user.CreateUserReq) (*user.CreateUserResp, error) {
	l := userservicelogic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServiceServer) DeleteUser(ctx context.Context, in *user.DeleteUserReq) (*user.DeleteUserResp, error) {
	l := userservicelogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServiceServer) UpdateUser(ctx context.Context, in *user.UpdateUserReq) (*user.UpdateUserResp, error) {
	l := userservicelogic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServiceServer) PatchUser(ctx context.Context, in *user.PatchUserReq) (*user.PatchUserResp, error) {
	l := userservicelogic.NewPatchUserLogic(ctx, s.svcCtx)
	return l.PatchUser(in)
}

func (s *UserServiceServer) ListUser(ctx context.Context, in *user.ListUserReq) (*user.ListUserResp, error) {
	l := userservicelogic.NewListUserLogic(ctx, s.svcCtx)
	return l.ListUser(in)
}

func (s *UserServiceServer) SyncOpenLdapUsers(ctx context.Context, in *user.SyncOpenLdapUsersReq) (*user.SyncOpenLdapUsersResp, error) {
	l := userservicelogic.NewSyncOpenLdapUsersLogic(ctx, s.svcCtx)
	return l.SyncOpenLdapUsers(in)
}
