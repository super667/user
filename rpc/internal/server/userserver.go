// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"github.com/super667/user/rpc/internal/logic"
	"github.com/super667/user/rpc/internal/svc"
	"github.com/super667/user/rpc/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Login(ctx context.Context, in *user.LoginReq) (*user.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) Register(ctx context.Context, in *user.RegisterReq) (*user.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 用户相关接口
func (s *UserServer) GetUserById(ctx context.Context, in *user.GetUserByIdReq) (*user.GetUserByIdResp, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) GetUserByNumber(ctx context.Context, in *user.GetUserByNumberReq) (*user.GetUserByNumberResp, error) {
	l := logic.NewGetUserByNumberLogic(ctx, s.svcCtx)
	return l.GetUserByNumber(in)
}

func (s *UserServer) GetUserByName(ctx context.Context, in *user.GetUserByNameReq) (*user.GetUserByNameResp, error) {
	l := logic.NewGetUserByNameLogic(ctx, s.svcCtx)
	return l.GetUserByName(in)
}

func (s *UserServer) CreateUser(ctx context.Context, in *user.CreateUserReq) (*user.CreateUserResp, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) DeleteUser(ctx context.Context, in *user.DeleteUserReq) (*user.DeleteUserResp, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *user.UpdateUserReq) (*user.UpdateUserResp, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) PatchUser(ctx context.Context, in *user.PatchUserReq) (*user.PatchUserResp, error) {
	l := logic.NewPatchUserLogic(ctx, s.svcCtx)
	return l.PatchUser(in)
}

func (s *UserServer) ListUser(ctx context.Context, in *user.ListUserReq) (*user.ListUserResp, error) {
	l := logic.NewListUserLogic(ctx, s.svcCtx)
	return l.ListUser(in)
}

func (s *UserServer) GetRoleById(ctx context.Context, in *user.GetRoleByIdReq) (*user.GetRoleByIdResp, error) {
	l := logic.NewGetRoleByIdLogic(ctx, s.svcCtx)
	return l.GetRoleById(in)
}

func (s *UserServer) CreateRole(ctx context.Context, in *user.CreateRoleReq) (*user.CreateRoleResp, error) {
	l := logic.NewCreateRoleLogic(ctx, s.svcCtx)
	return l.CreateRole(in)
}

func (s *UserServer) DeleteRole(ctx context.Context, in *user.DeleteRoleReq) (*user.DeleteRoleResp, error) {
	l := logic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

func (s *UserServer) UpdateRole(ctx context.Context, in *user.UpdateRoleReq) (*user.UpdateRoleResp, error) {
	l := logic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

func (s *UserServer) PatchRole(ctx context.Context, in *user.PatchRoleReq) (*user.PatchRoleResp, error) {
	l := logic.NewPatchRoleLogic(ctx, s.svcCtx)
	return l.PatchRole(in)
}

func (s *UserServer) ListRole(ctx context.Context, in *user.ListRoleReq) (*user.ListRoleResp, error) {
	l := logic.NewListRoleLogic(ctx, s.svcCtx)
	return l.ListRole(in)
}

func (s *UserServer) GetPermById(ctx context.Context, in *user.GetPermByIdReq) (*user.GetPermByIdResp, error) {
	l := logic.NewGetPermByIdLogic(ctx, s.svcCtx)
	return l.GetPermById(in)
}

func (s *UserServer) CreatePerm(ctx context.Context, in *user.CreatePermReq) (*user.CreatePermResp, error) {
	l := logic.NewCreatePermLogic(ctx, s.svcCtx)
	return l.CreatePerm(in)
}

func (s *UserServer) DeletePerm(ctx context.Context, in *user.DeletePermReq) (*user.DeletePermResp, error) {
	l := logic.NewDeletePermLogic(ctx, s.svcCtx)
	return l.DeletePerm(in)
}

func (s *UserServer) UpdatePerm(ctx context.Context, in *user.UpdatePermReq) (*user.UpdatePermResp, error) {
	l := logic.NewUpdatePermLogic(ctx, s.svcCtx)
	return l.UpdatePerm(in)
}

func (s *UserServer) PatchPerm(ctx context.Context, in *user.PatchPermReq) (*user.PatchPermResp, error) {
	l := logic.NewPatchPermLogic(ctx, s.svcCtx)
	return l.PatchPerm(in)
}

func (s *UserServer) ListPerm(ctx context.Context, in *user.ListPermReq) (*user.ListPermResp, error) {
	l := logic.NewListPermLogic(ctx, s.svcCtx)
	return l.ListPerm(in)
}

func (s *UserServer) GetStrategyById(ctx context.Context, in *user.GetStrategyByIdReq) (*user.GetStrategyByIdResp, error) {
	l := logic.NewGetStrategyByIdLogic(ctx, s.svcCtx)
	return l.GetStrategyById(in)
}

func (s *UserServer) CreateStrategy(ctx context.Context, in *user.CreateStrategyReq) (*user.CreateStrategyResp, error) {
	l := logic.NewCreateStrategyLogic(ctx, s.svcCtx)
	return l.CreateStrategy(in)
}

func (s *UserServer) DeleteStrategy(ctx context.Context, in *user.DeleteStrategyReq) (*user.DeleteStrategyResp, error) {
	l := logic.NewDeleteStrategyLogic(ctx, s.svcCtx)
	return l.DeleteStrategy(in)
}

func (s *UserServer) UpdateStrategy(ctx context.Context, in *user.UpdateStrategyReq) (*user.UpdateStrategyResp, error) {
	l := logic.NewUpdateStrategyLogic(ctx, s.svcCtx)
	return l.UpdateStrategy(in)
}

func (s *UserServer) PatchStrategy(ctx context.Context, in *user.PatchStrategyReq) (*user.PatchStrategyResp, error) {
	l := logic.NewPatchStrategyLogic(ctx, s.svcCtx)
	return l.PatchStrategy(in)
}

func (s *UserServer) ListStrategy(ctx context.Context, in *user.ListStrategyReq) (*user.ListStrategyResp, error) {
	l := logic.NewListStrategyLogic(ctx, s.svcCtx)
	return l.ListStrategy(in)
}

func (s *UserServer) GetUserRoleById(ctx context.Context, in *user.GetUserRoleByIdReq) (*user.GetUserRoleByIdResp, error) {
	l := logic.NewGetUserRoleByIdLogic(ctx, s.svcCtx)
	return l.GetUserRoleById(in)
}

func (s *UserServer) CreateUserRole(ctx context.Context, in *user.CreateUserRoleReq) (*user.CreateUserRoleResp, error) {
	l := logic.NewCreateUserRoleLogic(ctx, s.svcCtx)
	return l.CreateUserRole(in)
}

func (s *UserServer) DeleteUserRole(ctx context.Context, in *user.DeleteUserRoleReq) (*user.DeleteUserRoleResp, error) {
	l := logic.NewDeleteUserRoleLogic(ctx, s.svcCtx)
	return l.DeleteUserRole(in)
}

func (s *UserServer) UpdateUserRole(ctx context.Context, in *user.UpdateUserRoleReq) (*user.UpdateUserRoleResp, error) {
	l := logic.NewUpdateUserRoleLogic(ctx, s.svcCtx)
	return l.UpdateUserRole(in)
}

func (s *UserServer) PatchUserRole(ctx context.Context, in *user.PatchUserRoleReq) (*user.PatchUserRoleResp, error) {
	l := logic.NewPatchUserRoleLogic(ctx, s.svcCtx)
	return l.PatchUserRole(in)
}

func (s *UserServer) ListUserRole(ctx context.Context, in *user.ListUserRoleReq) (*user.ListUserRoleResp, error) {
	l := logic.NewListUserRoleLogic(ctx, s.svcCtx)
	return l.ListUserRole(in)
}
