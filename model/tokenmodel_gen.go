// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tokenFieldNames          = builder.RawFieldNames(&Token{})
	tokenRows                = strings.Join(tokenFieldNames, ",")
	tokenRowsExpectAutoSet   = strings.Join(stringx.Remove(tokenFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tokenRowsWithPlaceHolder = strings.Join(stringx.Remove(tokenFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tokenModel interface {
		Insert(ctx context.Context, data *Token) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Token, error)
		Update(ctx context.Context, data *Token) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTokenModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Token struct {
		Id         int64        `db:"id"`
		UserId     int64        `db:"user_id"`     // 用户名称
		Token      string       `db:"token"`       // 刷新token
		ExpiredAt  sql.NullTime `db:"expired_at"`  // 过期时间
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime time.Time    `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newTokenModel(conn sqlx.SqlConn) *defaultTokenModel {
	return &defaultTokenModel{
		conn:  conn,
		table: "`token`",
	}
}

func (m *defaultTokenModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTokenModel) FindOne(ctx context.Context, id int64) (*Token, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tokenRows, m.table)
	var resp Token
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTokenModel) Insert(ctx context.Context, data *Token) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tokenRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Token, data.ExpiredAt, data.DeleteTime)
	return ret, err
}

func (m *defaultTokenModel) Update(ctx context.Context, data *Token) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tokenRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Token, data.ExpiredAt, data.DeleteTime, data.Id)
	return err
}

func (m *defaultTokenModel) tableName() string {
	return m.table
}
